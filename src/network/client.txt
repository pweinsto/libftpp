#include "../../include/network/client.hpp"
#include <iostream>
#include <cstring>

Client::Client() : sockfd_(-1), connected_(false) {}

Client::~Client() {
    if (connected_) {
        disconnect();
    }
}

void Client::connect(const std::string& address, const size_t& port) {
    sockfd_ = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd_ < 0) {
        std::cerr << "Error opening socket" << std::endl;
        return;
    }

    serverAddr_.sin_family = AF_INET;
    serverAddr_.sin_port = htons(port);
    inet_pton(AF_INET, address.c_str(), &serverAddr_.sin_addr);

    if (::connect(sockfd_, (struct sockaddr*)&serverAddr_, sizeof(serverAddr_)) < 0) {
        std::cerr << "Connection failed" << std::endl;
        return;
    }

    connected_ = true;
}

void Client::disconnect() {
    close(sockfd_);
    connected_ = false;
}

void Client::defineAction(const Message::Type& messageType, const std::function<void(const Message&)>& action) {
    if (actions_.size() <= messageType) {
        actions_.resize(messageType + 1);
    }
    actions_[messageType] = action;
}

void Client::send(const Message& message) {
    if (!connected_) return;

    // Send message type
    int type = message.type();
    send(sockfd_, &type, sizeof(type), 0);

    // Send message data
    for (size_t i = 0; i < message.type(); ++i) {
        std::string data;
        message >> data;
        send(sockfd_, data.c_str(), data.size(), 0);
    }
}

void Client::update() {
    if (!connected_) return;

    // Receive message type
    int type;
    ssize_t received = recv(sockfd_, &type, sizeof(type), 0);
    if (received <= 0) return;

    // Receive message data
    Message message(type);
    while (true) {
        char buffer[1024];
        received = recv(sockfd_, buffer, sizeof(buffer), 0);
        if (received <= 0) break;
        message << std::string(buffer, received);
    }

    // Execute the appropriate action based on the message type
    if (type >= 0 && type < actions_.size() && actions_[type]) {
        actions_[type](message);
    }
}