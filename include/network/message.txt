#ifndef MESSAGE_HPP
#define MESSAGE_HPP

#include <iostream>
#include <sstream>
#include <vector>
#include <functional>

class Message {
public:
    using Type = int;

    // Constructor that initializes message type
    Message(int type = 0) : type_(type) {}

    // Type getter
    int type() const { return type_; }

    // Operator overload for writing to message (serialization)
    template <typename T>
    Message& operator<<(const T& value) {
        std::stringstream ss;
        ss << value;
        data_.push_back(ss.str());
        return *this;
    }

    // Operator overload for reading from message (deserialization)
    template <typename T>
    Message& operator>>(T& value) const {
        std::stringstream ss(data_.at(index_));
        ss >> value;
        index_++;
        return *this;
    }

private:
    int type_;  // Type of message
    mutable std::vector<std::string> data_;  // Data stored as strings
    mutable size_t index_ = 0;  // Read pointer for deserialization
};

#endif // MESSAGE_HPP
