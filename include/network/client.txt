#ifndef CLIENT_HPP
#define CLIENT_HPP

#include <string>
#include <functional>
#include <vector>
#include "message.hpp"
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

class Client {
public:
    Client();
    ~Client();

    // Connect to a server at a specific address and port
    void connect(const std::string& address, const size_t& port);

    // Disconnect from the server
    void disconnect();

    // Define an action for a specific message type
    void defineAction(const Message::Type& messageType, const std::function<void(const Message&)>& action);

    // Send a message to the server
    void send(const Message& message);

    // Process all received messages since last update
    void update();

private:
    int sockfd_;  // Socket file descriptor
    sockaddr_in serverAddr_;  // Server address
    std::vector<std::function<void(const Message&)>> actions_;  // Actions for each message type
    bool connected_;
};

#endif // CLIENT_HPP
